
    /**
     * Definition for singly-linked list.
     * public class ListNode {
     * int val;
     * ListNode next;
     * ListNode(int x) {
     * val = x;
     * next = null;
     * }
     * }
     */
    public class Solution {
        /**
         * 思路：
         * 1.双指针法
         *      创建两个指针 pApApA 和 pBpBpB，分别初始化为链表 A 和 B 的头结点。然后让它们向后逐结点遍历。
         * 当 pApApA 到达链表的尾部时，将它重定位到链表 B 的头结点 (你没看错，就是链表 B); 类似的，当 pBpBpB 到达链表的尾部时，将它重定位到链表 A 的头结点。
         * 若在某一时刻 pApApA 和 pBpBpB 相遇，则 pApApA/pBpBpB 为相交结点。
         * 想弄清楚为什么这样可行, 可以考虑以下两个链表: A={1,3,5,7,9,11} 和 B={2,4,9,11}，相交于结点 9。 由于 B.length (=4) < A.length (=6)，pBpBpB 比 pApApA 少经过 222 个结点，会先到达尾部。将 pBpBpB 重定向到 A 的头结点，pApApA 重定向到 B 的头结点后，pBpBpB 要比 pApApA 多走 2 个结点。因此，它们会同时到达交点。
         * 如果两个链表存在相交，它们末尾的结点必然相同。因此当 pApApA/pBpBpB 到达链表结尾时，记录下链表 A/B 对应的元素。若最后元素不相同，则两个链表不相交。
         *
         * 2. hashMap方法保存所有的节点，然后去比较
         * @param headA
         * @param headB
         * @return
         */
        public ListNode getIntersectionNode(ListNode headA, ListNode headB) {
            /*
            //1
            if (headA==null || headB==null) return null;
            ListNode p1=headA;
            ListNode p2=headB;
            int mark1=0;
            int mark2=0;
            while (p1!=p2){
                p1=p1.next;
                p2=p2.next;
                if (p1==null) {
                    if (mark1==1) return null;
                    p1=headB;
                    mark1=1;
                }
                if (p2==null) {
                    if (mark2==1) return null;
                    p2=headA;
                    mark2=1;
                }
            }
            return p1;*/
            //1简洁写法.因为最终a b会同时为 相交节点 或者 null
            ListNode a = headA;
            ListNode b = headB;
            while ( a != b ){
                a = (a == null) ? headB : a.next;
                b = (b == null) ? headA : b.next;
            }
            return a;
        }
    }

//runtime:1 ms
//memory:41.5 MB
